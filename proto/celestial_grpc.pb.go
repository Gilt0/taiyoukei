// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: celestial.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CelestialService_CelestialUpdate_FullMethodName = "/taiyoukei.CelestialService/CelestialUpdate"
)

// CelestialServiceClient is the client API for CelestialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelestialServiceClient interface {
	CelestialUpdate(ctx context.Context, opts ...grpc.CallOption) (CelestialService_CelestialUpdateClient, error)
}

type celestialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCelestialServiceClient(cc grpc.ClientConnInterface) CelestialServiceClient {
	return &celestialServiceClient{cc}
}

func (c *celestialServiceClient) CelestialUpdate(ctx context.Context, opts ...grpc.CallOption) (CelestialService_CelestialUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &CelestialService_ServiceDesc.Streams[0], CelestialService_CelestialUpdate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &celestialServiceCelestialUpdateClient{stream}
	return x, nil
}

type CelestialService_CelestialUpdateClient interface {
	Send(*CelestialBody) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type celestialServiceCelestialUpdateClient struct {
	grpc.ClientStream
}

func (x *celestialServiceCelestialUpdateClient) Send(m *CelestialBody) error {
	return x.ClientStream.SendMsg(m)
}

func (x *celestialServiceCelestialUpdateClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CelestialServiceServer is the server API for CelestialService service.
// All implementations must embed UnimplementedCelestialServiceServer
// for forward compatibility
type CelestialServiceServer interface {
	CelestialUpdate(CelestialService_CelestialUpdateServer) error
	mustEmbedUnimplementedCelestialServiceServer()
}

// UnimplementedCelestialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCelestialServiceServer struct {
}

func (UnimplementedCelestialServiceServer) CelestialUpdate(CelestialService_CelestialUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method CelestialUpdate not implemented")
}
func (UnimplementedCelestialServiceServer) mustEmbedUnimplementedCelestialServiceServer() {}

// UnsafeCelestialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CelestialServiceServer will
// result in compilation errors.
type UnsafeCelestialServiceServer interface {
	mustEmbedUnimplementedCelestialServiceServer()
}

func RegisterCelestialServiceServer(s grpc.ServiceRegistrar, srv CelestialServiceServer) {
	s.RegisterService(&CelestialService_ServiceDesc, srv)
}

func _CelestialService_CelestialUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CelestialServiceServer).CelestialUpdate(&celestialServiceCelestialUpdateServer{stream})
}

type CelestialService_CelestialUpdateServer interface {
	Send(*Data) error
	Recv() (*CelestialBody, error)
	grpc.ServerStream
}

type celestialServiceCelestialUpdateServer struct {
	grpc.ServerStream
}

func (x *celestialServiceCelestialUpdateServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *celestialServiceCelestialUpdateServer) Recv() (*CelestialBody, error) {
	m := new(CelestialBody)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CelestialService_ServiceDesc is the grpc.ServiceDesc for CelestialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CelestialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taiyoukei.CelestialService",
	HandlerType: (*CelestialServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CelestialUpdate",
			Handler:       _CelestialService_CelestialUpdate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "celestial.proto",
}
